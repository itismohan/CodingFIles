ai_controller.py

from flask import Blueprint, request, jsonify
from synthora_backend.app.services.ai_service import AIService
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Create a Blueprint for AI-related routes
ai_controller = Blueprint('ai_controller', __name__)
ai_service = AIService()

@ai_controller.route('/api/ai/ideation', methods=['POST'])
def generate_ideation():
    """Endpoint to generate brainstorming ideas based on user input."""
    data = request.get_json()
    topic = data.get("topic")
    
    if not topic:
        return jsonify({"error": "Topic is required."}), 400
    
    logging.info(f"Generating ideation for topic: {topic}")
    response = ai_service.generate_ideation(topic)
    
    return jsonify({"ideation": response})

@ai_controller.route('/api/ai/wireframe', methods=['POST'])
def predict_wireframe():
    """Endpoint to predict a wireframe based on user input."""
    data = request.get_json()
    description = data.get("description")
    
    if not description:
        return jsonify({"error": "Description is required."}), 400
    
    logging.info(f"Predicting wireframe for description: {description}")
    response = ai_service.predict_wireframe(description)
    
    return jsonify({"wireframe": response})

@ai_controller.route('/api/ai/epics', methods=['POST'])
def predict_epics():
    """Endpoint to predict epics based on given content."""
    data = request.get_json()
    content = data.get("content")
    
    if not content:
        return jsonify({"error": "Content is required."}), 400
    
    logging.info("Predicting epics from provided content")
    response = ai_service.predict_epics(content)
    
    return jsonify({"epics": response})

@ai_controller.route('/api/ai/feature_forecast', methods=['POST'])
def feature_forecast():
    """Endpoint to predict upcoming features based on trends."""
    data = request.get_json()
    domain = data.get("domain")
    
    if not domain:
        return jsonify({"error": "Domain is required."}), 400
    
    logging.info(f"Feature forecasting for domain: {domain}")
    response = ai_service.feature_forecasting(domain)
    
    return jsonify({"feature_forecast": response})

@ai_controller.route('/api/ai/test_scenarios', methods=['POST'])
def generate_test_scenarios():
    """Endpoint to generate test scenarios in Gherkin format."""
    data = request.get_json()
    feature = data.get("feature")
    
    if not feature:
        return jsonify({"error": "Feature is required."}), 400
    
    logging.info(f"Generating test scenarios for feature: {feature}")
    response = ai_service.generate_test_scenarios(feature)
    
    return jsonify({"test_scenarios": response})

@ai_controller.route('/api/ai/test_data', methods=['POST'])
def generate_test_data():
    """Endpoint to generate test data based on test cases."""
    data = request.get_json()
    test_case = data.get("test_case")
    
    if not test_case:
        return jsonify({"error": "Test case is required."}), 400
    
    logging.info("Generating test data for test case")
    response = ai_service.generate_test_data(test_case)
    
    return jsonify({"test_data": response})

@ai_controller.route('/api/ai/automation_script', methods=['POST'])
def generate_automation_script():
    """Endpoint to generate UI automation scripts."""
    data = request.get_json()
    framework = data.get("framework")
    test_case = data.get("test_case")
    
    if not framework or not test_case:
        return jsonify({"error": "Framework and test case are required."}), 400
    
    logging.info(f"Generating {framework} automation script for test case")
    response = ai_service.generate_ui_automation_script(framework, test_case)
    
    return jsonify({"automation_script": response})


    file_Upload_controller.py

    import os
import logging
from flask import Blueprint, request, jsonify
from werkzeug.utils import secure_filename
from synthora_backend.app.services.file_service import FileService

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Create a Blueprint for file upload routes
file_upload_controller = Blueprint('file_upload_controller', __name__)
file_service = FileService()

# Allowed file extensions
ALLOWED_EXTENSIONS = {'pdf', 'docx', 'csv', 'xlsx', 'json', 'figma'}
UPLOAD_FOLDER = 'uploads/'

# Ensure the upload folder exists
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

def allowed_file(filename):
    """Check if the uploaded file has an allowed extension."""
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@file_upload_controller.route('/api/upload', methods=['POST'])
def upload_file():
    """Endpoint to handle file uploads."""
    if 'file' not in request.files:
        return jsonify({"error": "No file part in request."}), 400
    
    file = request.files['file']
    
    if file.filename == '':
        return jsonify({"error": "No selected file."}), 400
    
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        file_path = os.path.join(UPLOAD_FOLDER, filename)
        file.save(file_path)
        
        logging.info(f"File {filename} uploaded successfully.")
        file_metadata = file_service.process_file(file_path)
        
        return jsonify({"message": "File uploaded successfully.", "file_metadata": file_metadata}), 200
    else:
        return jsonify({"error": "File type not allowed."}), 400



file-Download_controller

import os
import logging
from flask import Blueprint, request, jsonify, send_from_directory

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Create a Blueprint for file download routes
file_download_controller = Blueprint('file_download_controller', __name__)

# Define the folder where files are stored
UPLOAD_FOLDER = 'uploads/'

def get_safe_file_path(filename):
    """Ensure the requested file exists in the upload directory."""
    file_path = os.path.join(UPLOAD_FOLDER, filename)
    if os.path.exists(file_path):
        return file_path
    return None

@file_download_controller.route('/api/download/<filename>', methods=['GET'])
def download_file(filename):
    """Endpoint to handle file downloads."""
    file_path = get_safe_file_path(filename)
    if file_path:
        logging.info(f"Serving file: {filename}")
        return send_from_directory(UPLOAD_FOLDER, filename, as_attachment=True)
    else:
        return jsonify({"error": "File not found."}), 404

@file_download_controller.route('/api/list-files', methods=['GET'])
def list_files():
    """Endpoint to list available files for download."""
    try:
        files = os.listdir(UPLOAD_FOLDER)
        return jsonify({"files": files}), 200
    except Exception as e:
        logging.error(f"Error listing files: {str(e)}")
        return jsonify({"error": "Unable to list files."}), 500

automation_controller.py


import os
import json
import logging
from flask import Blueprint, request, jsonify, send_from_directory
from synthora_backend.services.script_service import generate_test_script
from werkzeug.utils import secure_filename
import threading

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Create Blueprint
automation_controller = Blueprint('automation_controller', __name__)

# Directory for storing generated scripts
SCRIPT_STORAGE_DIR = "synthora_backend/generated_scripts"
os.makedirs(SCRIPT_STORAGE_DIR, exist_ok=True)

def background_script_generation(script_data, script_path):
    """Runs script generation in a separate thread."""
    try:
        generate_test_script(script_data, script_path)
        logger.info(f"Script generated successfully: {script_path}")
    except Exception as e:
        logger.error(f"Error generating script: {str(e)}")

@automation_controller.route('/generate-script', methods=['POST'])
def generate_script():
    """API Endpoint to generate automation scripts."""
    try:
        data = request.json
        if not data or 'test_scenario' not in data:
            return jsonify({"status": "error", "message": "Invalid request. Missing 'test_scenario'."}), 400
        
        filename = secure_filename(f"script_{int(time.time())}.js")
        script_path = os.path.join(SCRIPT_STORAGE_DIR, filename)
        
        # Run script generation in background
        thread = threading.Thread(target=background_script_generation, args=(data, script_path))
        thread.start()
        
        return jsonify({"status": "success", "message": "Script generation started.", "script_path": filename}), 202
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        return jsonify({"status": "error", "message": "Internal Server Error."}), 500

@automation_controller.route('/download-script/<filename>', methods=['GET'])
def download_script(filename):
    """API Endpoint to download a generated script."""
    try:
        script_path = os.path.join(SCRIPT_STORAGE_DIR, filename)
        if not os.path.exists(script_path):
            return jsonify({"status": "error", "message": "File not found."}), 404
        
        return send_from_directory(SCRIPT_STORAGE_DIR, filename, as_attachment=True)
    except Exception as e:
        logger.error(f"Download error: {str(e)}")
        return jsonify({"status": "error", "message": "Internal Server Error."}), 500
